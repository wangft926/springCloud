server:
  port: 8889

spring:
  application:
    name: gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true # 是否和服务注册与发现组件结合，设置为 true 后可以直接使用应用名称调用服务
      routes:  # 路由标识（id：标识，具有唯一性）
        - id: svca_route
           # 目标服务地址（uri：地址，请求转发后的地址）
          #uri: http://www.baidu.com
          uri: lb://svca-service
          predicates:   # 路由条件（predicates：断言，匹配 HTTP 请求内容）
            - Path=/gateway/svca/**  # 转发地址格式为 uri/archive
          filters:
            # 截取路径位数
            - StripPrefix=1
            #比如：请求/hello，最后转发到目标服务的路径变为/mypath/hello
            #- PrefixPath=/mypath
        - id: svcb_route
          uri: lb://svcb-service
          predicates:
          - Path=/gateway/svcb/**
          filters:
               # 截取路径位数
          - StripPrefix=1
    config:
      uri: http://localhost:8888
      fail-fast: true
      username: user
      password: ${CONFIG_SERVER_PASSWORD:password}
      retry:
        initial-interval: 2000
        max-interval: 10000
        multiplier: 2
        max-attempts: 10


eureka:
  instance:
    #hostname: registry
    #instance-id: xxxx             #自定义服务名称，Eureka界面status后显示
    prefer-ip-address: true       #访问路径可以显示ip地址
    #metadata-map:                #自定义元数据
      #user.name: ${security.user.name}
      #user.password: ${security.user.password}
  client:
    service-url:
      defaultZone: http://registry1:8761/eureka/,http://registry2:8762/eureka/,http://registry2:8762/eureka/




#      # 路由（routes：路由，它由唯一标识（ID）、目标服务地址（uri）、一组断言（predicates）和一组过滤器组成（filters）。filters 不是必需参数。）
#      routes:
#        # 路由标识（id：标识，具有唯一性）   综合
#        - id: route_all
#          # 目标服务地址（uri：地址，请求转发后的地址）
#          uri: lb://gateway-service
#          # 路由条件（predicates：断言，匹配 HTTP 请求内容）
#          predicates:
#            ## 转发地址格式为 uri/routeAll，/all 部分会被下面的过滤器给截取掉
#            - Path=/all/routeAll
#            ## 匹配 GET 请求
#            - Method=GET
#          # 过滤器（filters：过滤器，过滤规则）
#          filters:
#            ## 截取路径位数
#            - StripPrefix=1
#            ## 添加指定参数
#            - AddRequestParameter=pass, yes
#            ## 熔断
#            - name: Hystrix
#              args:
#                name: fallbackcmd
#                ### fallback 时调用的方法 http://localhost:8000/fallback
#                fallbackUri: forward:/fallback
#            ## 限流
#            - name: RequestRateLimiter
#              args:
#                ### 限流过滤器的 Bean 名称
#                key-resolver: '#{@uriKeyResolver}'
#                ### 希望允许用户每秒处理多少个请求
#                redis-rate-limiter.replenishRate: 1
#                ### 用户允许在一秒钟内完成的最大请求数
#                redis-rate-limiter.burstCapacity: 3
#
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: ALWAYS